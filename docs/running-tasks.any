#language anatomy

\use{\load{concourse/docs}}

\template{\load{concourse/docs-template}}

\title{Tasks}{running-tasks}

The smallest configurable unit in a Concourse pipeline is a single task. A task
can be thought of as a function from \reference{inputs} to \reference{outputs},
that can either succeed or fail.

Once you have a running Concourse deployment, you can start configuring your
tasks and executing them interactively from your terminal with the
\reference{fly-cli}{Fly} commandline tool.

Once you've figured out your tasks's configuration, you can reuse it for a
\reference{jobs}{Job} in your \reference{pipelines}{Pipeline}.


\section{Configuring a Task}{configuring-tasks}{
  Conventionally a task's configuration is placed in the root of a repo as
  \code{task.yml}. It may look something like:

  \titled-codeblock{task.yml}{yaml}{
  ---
  platform: linux

  image_resource:
    type: docker-image
    source:
      repository: ubuntu
      tag: '14.04'

  inputs:
  - name: my-repo

  run:
    path: my-repo/scripts/test
  }

  This configuration specifies that the task must run with the
  \code{ubuntu:14.04} Docker image with a \code{my-repo} input, and when the
  task is executed it will run the script \code{my-repo/scripts/test}.

  A task's configuration specifies the following:

  \define-attribute{platform: string}{
    \italic{Required.} The platform the task should run on. By convention,
    \code{windows}, \code{linux}, or \code{darwin} are specified. This determines
    the pool of workers that the task can run against. The base deployment
    provides Linux workers.
  }

  \define-attribute{image_resource: object}{
    \italic{Optional.} The base image of the container. This style of
    specifying the base image has the same affect as \code{image:} above but
    uses Concourse resources to download the image.  The contents of this field
    should be the same as a resource configuration in your pipeline (without
    the name).

    The following example configures the task to use the \code{golang:1.6}
    Docker image:

    \codeblock{yaml}{
    image_resource:
      type: docker-image
      source: \{repository: golang, tag: "1.6"\}
    }

    ...and the following example uses an insecure private Docker registry with
    a username and password:

    \codeblock{yaml}{
    image_resource:
      type: docker-image
      source:
        repository: my.local.registry:8080/my/image
        insecure_registries: ["my.local.registry:8080"]
        username: myuser
        password: mypass
        email: x@x.com
    }

    You can use any resource that returns a filesystem in the correct format (a
    \code{/rootfs} directory and a \code{metadata.json} file in the top level)
    but normally this will tbe the
    \hyperlink{https://github.com/concourse/docker-image-resource}{Docker Image
    resource}. If you'd like to make a resource of your own that supports this
    please use that as a reference implementation for now.
  }

  \define-attribute{image: string}{
    \italic{Optional.} A string specifying the rootfs of the container, as
    interpreted by your worker's Garden backend.

    The
    \hyperlink{https://github.com/cloudfoundry-incubator/garden-linux}{Garden
    Linux} backend, for example, interprets \code{docker} URIs like
    \code{docker:///username/repo#tag} by fetching the current version of the
    image and caching it. It can also be an absolute path to an extracted
    rootfs on the worker.

    This kind of leaks through the Concourse abstration layer, however:
    Concourse doesn't know the version of the image that was fetched, making it
    impossible for builds to be truly reproducible. Other downsides are that
    there's no way to emit progress while it's downloading, and the cache grows
    forever, not visible through Concourse APIs. For these reasons, you should
    use \code{image_resource} instead whenever possible.
  }

  \define-attribute{inputs: [object]}{
    \italic{Required.} The expected set of inputs for the task.

    This determines which artifacts will propagate into the task, as the
    \reference{build-plans}{build plan} executes. If any specified inputs
    are not present, the task will end with an error, without running.

    Each input has the following attributes:

    \inset{
      \define-attribute{name: string}{
        \italic{Required.} The logical name of the input.
      }

      \define-attribute{path: string}{
        \italic{Optional.} The path where the input will be placed. If not
        specified, the input's \code{name} is used.
      }
    }
  }

  \define-attribute{outputs: [object]}{
    \italic{Optional.} The artifacts produced by the task.

    Each output configures a directory to make available to later steps in the
    \reference{build-plans}{build plan}. The directory will be automatically
    created before the task runs, and the task should place any artifacts it
    wants to export in the directory.

    Each output has the following attributes:

    \inset{
      \define-attribute{name: string}{
        \italic{Required.} The logical name of the output. The contents under
        \code{path} will be made available to the rest of the plan under this
        name.
      }

      \define-attribute{path: string}{
        \italic{Optional.} The path to a directory where the output will be
        taken from. If not specified, the output's \code{name} is used.

        Note that this value \italic{must not overlap} with any other inputs or
        outputs. Each output results in a new empty directory that your task
        should place artifacts in; if the path overlaps it'll clobber whatever
        files used to be there.
      }
    }

    For example, the following task and script would be used to propagate a
    built binary to later steps:

    \codeblock{yaml}{
    ---
    platform: linux

    image_resource: # ...

    inputs:
    - name: project-src

    outputs:
    - name: built-project

    run:
      path: project-src/ci/build
    }

    ...assuming \code{project-src/ci/build} looks something like:

    \codeblock{bash}{
    #!/bin/bash

    set -e -u -x

    export GOPATH=$PWD/project-src

    go build -o built-project/my-project github.com/concourse/my-project
    }

    ...this task could then be used in a \reference{build-plans}{build plan}
    like so:

    \codeblock{yaml}{
    plan:
    - get: project-src
    - task: build-bin
      file: project-src/ci/build.yml
    - put: project-bin
      params: {file: built-project/my-project}
    }
  }

  \define-attribute{run: object}{
    \italic{Required.} The command to execute in the container.

    \inset{
      \define-attribute{path: string}{
        \italic{Required.} The command to execute, relative to the task's
        working directory. For a script living in a resource's repo, you must
        specify the full path to the resource, i.e.
        \code{my-resource/scripts/test}.
      }

      \define-attribute{args: [string]}{
        \italic{Optional.} Arguments to pass to the command. Note that when
        executed with Fly, any arguments passed to Fly are appended to this
        array.
      }
    }

    Note that this is \italic{not} provided as a script blob, but explicit
    \code{path} and \code{args} values; this allows \code{fly} to forward
    arguments to the script, and forces your config \code{.yml} to stay fairly
    small.
  }

  \define-attribute{params: \{string: string\}}{
    \italic{Optional.} A key-value mapping of values that are exposed to the
    task via environment variables.

    Use this to provide things like credentials, not to set up the task's
    Bash environment (they do not support interpolation).
  }
}

\section{Running tasks with \code{fly}}{fly}{
  \reference{fly-cli}{Fly} is a command-line tool that can be used to execute
  a task configuration against a Concourse deployment. This provides a fast
  feedback loop for iterating on the task configuration and your code.

  For more information, see \reference{fly-execute}.
}
