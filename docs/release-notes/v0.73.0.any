#language anatomy

\title{v0.73.0}

\list{
  The \reference{fly-destroy-pipeline} command now runs much quicker.
  Unfortunately to implement this there's a massive database migration.
  Expect anywhere from a few minutes of downtime up to a few hours when
  you upgrade to this version, depending on how many builds you have and
  how chatty they are. Sorry about that.

  There is no way of predicting how long this migration may take for your
  instance. It depends on the chattiness of your builds and the performance of
  your database. For a rough approximation: running the migration on the
  Concourse team's server took 20 minutes to migrate 13 million build events.

  You can find out how many build events you have by running the following
  query against your Concourse database:

  \codeblock{sql}{
    SELECT relname, n_live_tup
    FROM pg_stat_user_tables
    WHERE relname = 'build_events';
  }

  The root of the issue is the amount of data in the \code{build_events} table.
  If you don't have many build logs then then you can probably just upgrade and
  not worry about the rest of this. If the upgrade is going to take too long
  then you'll need to find some way to reduce the rows in that table.

  Before you delete any data from the system you should make sure to take a
  \hyperlink{http://www.postgresql.org/docs/9.1/static/backup.html}{backup of
  your database} and make doubly sure you can restore it while blind-folded and
  upside-down in case anything goes wrong.

  If you don't care about your old build logs then you can simply run
  \code{TRUNCATE build_events;} before upgrading and the migration will be
  quick and painless.

  Many of you probably do care about your build events but maybe only those
  which were created in the past X months. If this sounds like a good idea then
  have I got the SQL query for you! Run this against your Concourse database
  (change the X to the number of months you'd like to keep):

  \codeblock{sql}{
    DELETE FROM build_events
    WHERE build_id IN (
      SELECT builds.id
      FROM jobs JOIN builds ON jobs.id = builds.job_id
      WHERE builds.end_time < NOW() - INTERVAL 'X month'
      ORDER BY builds.id
    );
  }

  This query may take a while to execute but your Concourse can be online the
  entire time that it is running.

  If you want to keep all of your build logs and have a fast migration then I'm
  sorry, I can't help you. :( Maybe upgrade over a weekend?
}{
  \italic{Backwards-incompatible:} the
  \hyperlink{https://github.com/concourse/docker-image-resource}{Docker Image
  resource} no longer produces the \code{docker save}d image by default. This
  is to reduce disk usage when using the resource as an
  \reference{image_resource}. You must now pass \code{save: true} as part of
  \code{params} on the \reference{get-step} step to produce the \code{image}
  file.
}{
  Inputs to jobs that are not configured to \reference{trigger} the job when
  new versions appear will now be rendered with a dashed line. This makes it
  easier to see which resources automate the pipeline flow, and which jobs are
  only ever manually triggered.
}{
  A pending build will now indicate why it's pending, via a checklist that
  appears at the top of the build output. (Yay!)
}{
  The theme selector is gone. So are all but one of the themes. This new theme
  is the product of our research and your feedback. I'm confident that it's
  perfect in every way.  But let us know if you have any major problems with
  it.
}{
  Improved the caching of resources used for \reference{image_resource}.
  Previously if the same version was fetched multiple times on the same worker,
  we'd keep all of them around so long as they were the latest version. We'll
  now only keep one.
}{
  The \reference{fly-destroy-pipeline} command learnt the \code{-n} option
  which when used will not ask you to confirm the deletion of the pipeline.
  Useful for scripts. Dangerous for users.
}{
  The \hyperlink{https://github.com/concourse/docker-image-resource}{Docker
  Image resource} no longer worked for images configured with
  \code{ENTRYPOINT}s as of \reference{v0.72.0}, and ended up running whatever
  the entrypoint was, with our internal binary tool as an argument. It now
  works again. Our bad.
}{
  The \hyperlink{https://github.com/concourse/github-release-resource}{GitHub
  release resource} would have issues when fetching artefacts from S3 via
  GitHub when using an access token. It no longer has these issues.
}{
  The \hyperlink{https://github.com/concourse/docker-image-resource}{Docker
  Image resource} now supports a \code{dockerfile} parameter for specifying a
  path to the \code{Dockerfile} to use.
}{
  The \hyperlink{https://github.com/concourse/git-resource}{Git resource} now
  supports producing annotated tags via the \code{annotate} parameter.
}{
  The \hyperlink{https://github.com/concourse/git-resource}{Git resource} now
  supports checking for tag patterns like \code{*-production} via the
  \code{tag_filter} source configuration.
}{
  The \hyperlink{https://github.com/concourse/git-resource}{Git resource} now
  includes \hyperlink{https://git-lfs.github.com/}{\code{git lfs}}.
}
