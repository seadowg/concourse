use(require("atomy"))

data = require("anatomy/data")

hl = require("hl")
yaml = hl load("yaml")

base = require("anatomy/base")

def(pipeline-image(asset-path)):
  data ResolveBlock new(
    [part]:
      part assets << File expand-path(asset-path)
      part assets << File expand-path("../pipeline-svg.css", __FILE__)
      part css-additions << File expand-path("../flex-pipeline-image.css", __FILE__)

      data Block new(
        data Element new(
          ""
          .svg(File basename(asset-path)))
        .class("pipeline-image")))

def(literate-segment(*paras, code)):
  when(paras empty?):
    paras = [code]
    code = ""

  data Block new(
    data Block new(
      [
        data ResolveElement new(
          [part]:
            part css-additions << File expand-path("../literate.css", __FILE__)
            data Element new([]))

        data Block new(
          paras
          .class("prose"))

        data Block new(
          code
          .class("code"))
      ]
      .class("literate-entry"))
    .class("literate-segment"))

fn(format-inline(tokens, link-only = nil)):
  tokens collect [t]:
    data Element new(
      -- constants, identifiers, and operators
      if((link-only && link-only include?(t contents)) ||
          (!link-only && ["no", "n", "o"] include?(t type tag)))
        then: base reference(t contents, t contents)
        else: t contents
      .class(t type tag))

def(titled-codeblock(title, lang, *content)):
  data Block new(
    [ data Block new(base code(title), .class("codeblock-title"))
      base codeblock(lang, *content)
    ]
    .class("titled-codeblock"))

def(define-metric(metric-name, body)):
  target = base target-element(metric-name)

  data Block new(
    [
      data Block new(
        [data Block new([target, metric-name], .tt)]
        .class("thumb"))

      body
    ]
    .class("definition"))

def(define-attribute(what, *tags, body)):
  define-tagged-attributes([what], tags, body)

def(define-attributes(*whats, body)):
  define-tagged-attributes(whats, [], body)

def(define-tagged-attributes(whats, tags, body)):
  attribute-names = whats collect [w]: w split(":") first

  tags =
    if(tags empty?)
      then: attribute-names
      else: tags

  targets = attribute-names collect [attr] {
    tags collect [tag]:
      base target-element(tag, base code(format-inline(yaml lex(attr), [])))
  } flatten

  link-target = tags first

  data Block new(
    [ whats collect with-index [w, i]:
        display = base reference(link-target, format-inline(yaml lex(w), []))

        data Block new(
          [data Block new([targets, display], .tt)]
          .class("thumb"))

      body
    ]
    .class("definition"))

def(slack-button):
  data ResolveElement new(
    [part]:
      part css-additions << File expand-path("../slack.css", __FILE__)

      data Element new(
        [],
        .async-script-src("http://slack.concourse.ci/slackin.js")))

def(column(name, content)):
  ents = []
  Array(content) select [x]:
    x match:
      .entry(content, type):
        ents << data Block new([data Block new([content], .class("cell"))], .class(type))

  data List new([data Block new([name], .class("header"))] + ents)

def(normal(content)):
  .entry(content, "normal")

def(good(content)):
  .entry(content, "good")

def(bad(content)):
  .entry(content, "bad")

def(gap(content)):
  .entry(content, "gap")

def(disabled(content)):
  .entry(content, "disabled")

def(resources-table(body)):
  data ResolveElement new(
    [part]:
      part css-additions << File expand-path("../resources-table.css", __FILE__)

      data Block new(body, .class("resources-table")))
